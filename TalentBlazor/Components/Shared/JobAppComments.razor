@inherits AppComponentBase

<section aria-labelledby="notes-title">
    <div class="bg-white shadow sm:rounded-lg sm:overflow-hidden">
        <div class="divide-y divide-gray-200">
            @if (PhoneScreen is { Notes: { } })
            {
                <div class="px-4 py-2 sm:px-6">
                    <h2 id="notes-title" class="text-lg font-medium text-gray-900">Phone Screen Notes</h2>
                </div>
                <div class="px-4 py-2 sm:px-6">
                    <div class="flex space-x-3">
                        <div class="flex-shrink-0">
                            <img class="h-10 w-10 rounded-full ring-purple-500 border-purple-500" src="@(PhoneScreen.ApplicationUser.ProfileUrl)" alt="">
                        </div>
                        <div>
                            <div class="text-sm">
                                <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" width="1em" height="1em" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><path fill="currentColor" d="M20 10.999h2C22 5.869 18.127 2 12.99 2v2C17.052 4 20 6.943 20 10.999z" /><path fill="currentColor" d="M13 8c2.103 0 3 .897 3 3h2c0-3.225-1.775-5-5-5v2zm3.422 5.443a1.001 1.001 0 0 0-1.391.043l-2.393 2.461c-.576-.11-1.734-.471-2.926-1.66c-1.192-1.193-1.553-2.354-1.66-2.926l2.459-2.394a1 1 0 0 0 .043-1.391L6.859 3.513a1 1 0 0 0-1.391-.087l-2.17 1.861a1 1 0 0 0-.29.649c-.015.25-.301 6.172 4.291 10.766C11.305 20.707 16.323 21 17.705 21c.202 0 .326-.006.359-.008a.992.992 0 0 0 .648-.291l1.86-2.171a1 1 0 0 0-.086-1.391l-4.064-3.696z" /></svg>
                            </div>
                            <div class="text-sm">
                                <span class="font-medium text-gray-900">@(PhoneScreen.ApplicationUser.DisplayName)</span>
                            </div>
                            <div class="mt-1 text-sm text-gray-700">
                                <p>@PhoneScreen.Notes</p>
                            </div>
                            <div class="mt-2 text-sm space-x-2">
                                <span class="text-gray-500 font-medium">@((DateTime.UtcNow - PhoneScreen.CreatedDate).Days < 1 ? "Today" : ((DateTime.UtcNow - PhoneScreen.CreatedDate).Days.ToString() +" days ago"))</span>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (Interview is { Notes: { } })
            {
                <div class="px-4 py-2 sm:px-6">
                    <h2 id="notes-title" class="text-lg font-medium text-gray-900">Interview Notes</h2>
                </div>
                <div class="px-4 py-2 sm:px-6">
                    <div class="flex space-x-3">
                        <div class="flex-shrink-0">
                            <img class="h-10 w-10 rounded-full ring-purple-500 border-purple-500" src="@(Interview.ApplicationUser.ProfileUrl)" alt="">
                        </div>
                        <div>
                            <div class="text-sm">
                                <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" width="1em" height="1em" preserveAspectRatio="xMidYMid meet" viewBox="0 0 16 16"><g fill="currentColor"><path d="M7 14s-1 0-1-1s1-4 5-4s5 3 5 4s-1 1-1 1H7zm4-6a3 3 0 1 0 0-6a3 3 0 0 0 0 6z" /><path fill-rule="evenodd" d="M5.216 14A2.238 2.238 0 0 1 5 13c0-1.355.68-2.75 1.936-3.72A6.325 6.325 0 0 0 5 9c-4 0-5 3-5 4s1 1 1 1h4.216z" /><path d="M4.5 8a2.5 2.5 0 1 0 0-5a2.5 2.5 0 0 0 0 5z" /></g></svg>
                            </div>
                            <div class="text-sm">
                                <span class="font-medium text-gray-900">@(Interview.ApplicationUser.DisplayName)</span>
                            </div>
                            <div class="mt-1 text-sm text-gray-700">
                                <p>@Interview.Notes</p>
                            </div>
                            <div class="mt-2 text-sm space-x-2">
                                <span class="text-gray-500 font-medium">@((DateTime.UtcNow - Interview.CreatedDate).Days < 1 ? "Today" : ((DateTime.UtcNow - Interview.CreatedDate).Days.ToString() +" days ago"))</span>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @if (JobOffer is { Notes: { } })
            {
                <div class="px-4 py-2 sm:px-6">
                    <h2 id="notes-title" class="text-lg font-medium text-gray-900">Offer Notes</h2>
                </div>
                <div class="px-4 py-2 sm:px-6">
                    <div class="flex space-x-3">
                        <div class="flex-shrink-0">
                            <img class="h-10 w-10 rounded-full ring-purple-500 border-purple-500" src="@(JobOffer.ApplicationUser.ProfileUrl)" alt="">
                        </div>
                        <div>
                            <div class="text-sm text-black">
                                <!-- Heroicon name: solid/currency-dollar -->
                                <span class="oi oi-dollar text-black"></span>
                            </div>
                            <div class="text-sm">
                                Offer: $@(JobOffer.SalaryOffer/1000)k
                            </div>
                            <div class="text-sm">
                                <span class="font-medium text-gray-900">@(JobOffer.ApplicationUser.DisplayName)</span>
                            </div>
                            <div class="mt-1 text-sm text-gray-700">
                                <p>@JobOffer.Notes</p>
                            </div>
                            <div class="mt-2 text-sm space-x-2">
                                <span class="text-gray-500 font-medium">@((DateTime.UtcNow - JobOffer.CreatedDate).Days < 1 ? "Today" : ((DateTime.UtcNow - JobOffer.CreatedDate).Days.ToString() +" days ago"))</span>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="px-4 py-2 sm:px-6">
                <h2 id="notes-title" class="text-lg font-medium text-gray-900">Comments</h2>
            </div>
            <div class="px-4 py-6 sm:px-6">
                <ul role="list" class="space-y-8">
                    @foreach (var comment in GetComments().OrderBy(x => x.CreatedDate))
                    {
                        <li>
                            <div class="flex space-x-3">
                                <div class="flex-shrink-0">
                                    <img class="h-10 w-10 rounded-full" src="@(comment.ApplicationUser.ProfileUrl)" alt="">
                                </div>
                                <div>
                                    <div class="text-sm">
                                        <a href="#" class="font-medium text-gray-900">@(comment.ApplicationUser.DisplayName)</a>
                                    </div>
                                    <div class="mt-1 text-sm text-gray-700">
                                        <p>@comment.Comment</p>
                                    </div>
                                    <div class="mt-2 text-sm space-x-2">
                                        <span class="text-gray-500 font-medium">@((DateTime.UtcNow - comment.CreatedDate).Days < 1 ? "Today" : ((DateTime.UtcNow - comment.CreatedDate).Days.ToString() +" days ago"))</span>
                                    </div>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>
        <div class="bg-gray-50 px-4 py-6 sm:px-6">
            <div class="flex space-x-3">
                <AuthorizeView>
                    <Authorized>
                        <div class="flex-shrink-0">
                            <img class="h-10 w-10 rounded-full" src="@context.User.GetProfileUrl()" alt="">
                        </div>
                        <div class="min-w-0 flex-1">
                            <CascadingValue Value=@errorStatus>
                                <form @onsubmit="Submit">
                                    <div>
                                        <InputTextArea @bind-Value="request.Comment" name="Note" rows="3" class="shadow-sm block w-full focus:ring-blue-500 focus:border-blue-500 sm:text-sm border border-gray-300 rounded-md" placeholder="Add a comment"></InputTextArea>
                                    </div>
                                    <div class="mt-3 flex items-center justify-between">
                                        <a href="#" class="group inline-flex items-start text-sm space-x-2 text-gray-500 hover:text-gray-900">
                                            <!-- Heroicon name: solid/question-mark-circle -->
                                            <svg class="flex-shrink-0 h-5 w-5 text-gray-400 group-hover:text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd" />
                                            </svg>
                                        </a>

                                        <button type="submit" class="inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">Comment</button>

                                    </div>
                                </form>
                            </CascadingValue>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
</section>
@code {
    [Parameter]
    public int JobApplicationId { get; set; }

    [Parameter]
    public PhoneScreen PhoneScreen { get; set; }

    [Parameter]
    public Interview Interview { get; set; }

    [Parameter]
    public JobOffer JobOffer { get; set; }

    bool hasPhoneScreen => PhoneScreen?.Notes != null;
    bool hasInterview => Interview?.Notes != null;

    List<JobApplicationComment>? comments;
    JobApplicationComment request = new();

    ResponseStatus? errorStatus;

    IEnumerable<JobApplicationComment> GetComments() => comments ?? new List<JobApplicationComment>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshData();
        await base.OnParametersSetAsync();
    }

    async Task RefreshData()
    {
        await RefreshComments();
    }

    async Task RefreshComments()
    {
        var api = await ApiAsync(new QueryJobApplicationComments {
            JobApplicationId = JobApplicationId
        });
        if (api.Succeeded)
            comments = api.Response!.Results;
        else
            errorStatus = api.Error;
    }

    async Task Submit()
    {
        await AddComment();
    }

    async Task AddComment()
    {
        var api = await ApiAsync(new CreateJobApplicationComment {
            JobApplicationId = JobApplicationId,
            Comment = request.Comment
        });
        if (api.Succeeded)
        {
            await RefreshComments();
            request = new();
        }
        else
        {
            errorStatus = api.Error;
        }
    }
}
