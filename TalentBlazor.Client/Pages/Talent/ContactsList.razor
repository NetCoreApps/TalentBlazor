@page "/contacts"
@inherits AppComponentBase

<SetHeader>
    <div class="flex-1 min-w-0">
        <nav class="flex" aria-label="Breadcrumb">
            @if (contacts.Count > 0)
            {
                <Breadcrumbs>
                    <Breadcrumb href="/contacts">Contacts</Breadcrumb>
                </Breadcrumbs>
            }
        </nav>

        <div class="mt-1 flex flex-col sm:flex-row sm:flex-wrap sm:mt-0 sm:space-x-8">
            <div class="ml-4 mt-4">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Candidates</h3>
                <p class="mt-1 text-sm text-gray-500">Lorem ipsum dolor sit amet consectetur adipisicing elit quam corrupti consectetur.</p>
            </div>
        </div>
    </div>
</SetHeader>

<main class="px-4 py-2 sm:p-6">
    <!-- Tabs -->
    <div class="sm:hidden">
        <label for="tabs" class="sr-only">Select a tab</label>
        <!-- Use an "onChange" listener to redirect the user to the selected tab URL. -->
        <select id="tabs" name="tabs" @bind="filter" class="mt-4 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm rounded-md">
            <option value="@EmploymentType.FullTime">Full-time</option>

            <option value="@EmploymentType.PartTime">Part-time</option>

            <option value="@EmploymentType.Contract">Contract</option>

            <option value="@EmploymentType.Casual">Casual</option>
        </select>
    </div>
    <div class="hidden sm:block">
        <div class="border-b border-gray-200">
            <nav class="mt-2 -mb-px flex space-x-8" aria-label="Tabs">
                <!-- Current: "border-purple-500 text-purple-600", Default: "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-200" -->
                <a href="" @onclick="(e) => ChangeFilter(EmploymentType.FullTime)" @onclick:preventDefault class="@(filter == EmploymentType.FullTime ? "border-purple-500 text-purple-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-200") whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                    Full-time

                    <!-- Current: "bg-purple-100 text-purple-600", Default: "bg-gray-100 text-gray-900" -->
                    <span class="hidden ml-2 py-0.5 px-2.5 rounded-full text-xs font-medium md:inline-block @(filter == EmploymentType.FullTime ? "bg-purple-100 text-purple-600" : "bg-gray-100 text-gray-900")">
                        @(ContactCount(EmploymentType.FullTime))
                    </span>
                </a>

                <a href="" @onclick="(e) => ChangeFilter(EmploymentType.PartTime)" @onclick:preventDefault class="@(filter == EmploymentType.PartTime ? "border-purple-500 text-purple-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-200") whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                    Part-time

                    <span class="hidden ml-2 py-0.5 px-2.5 rounded-full text-xs font-medium md:inline-block @(filter == EmploymentType.PartTime ? "bg-purple-100 text-purple-600" : "bg-gray-100 text-gray-900")">
                        @(ContactCount(EmploymentType.PartTime))
                    </span>
                </a>

                <a href="" @onclick="(e) => ChangeFilter(EmploymentType.Contract)" @onclick:preventDefault class="@(filter == EmploymentType.Contract ? "border-purple-500 text-purple-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-200") whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                    Contract

                    <span class="hidden ml-2 py-0.5 px-2.5 rounded-full text-xs font-medium md:inline-block @(filter == EmploymentType.Contract ? "bg-purple-100 text-purple-600" : "bg-gray-100 text-gray-900")">
                        @(ContactCount(EmploymentType.Contract))
                    </span>
                </a>

                <a href="" @onclick="(e) => ChangeFilter(EmploymentType.Casual)" @onclick:preventDefault class="@(filter == EmploymentType.Casual ? "border-purple-500 text-purple-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-200") whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                    Casual
                    <!-- Current: "bg-purple-100 text-purple-600", Default: "bg-gray-100 text-gray-900" -->
                    <span class="hidden ml-2 py-0.5 px-2.5 rounded-full text-xs font-medium md:inline-block @(filter == EmploymentType.Casual ? "bg-purple-100 text-purple-600" : "bg-gray-100 text-gray-900")">
                        @(ContactCount(EmploymentType.Casual))
                    </span>
                </a>
            </nav>
        </div>
    </div>

    <div class="bg-white shadow overflow-hidden sm:rounded-md">
        <ul role="list" class="divide-y divide-gray-200">
            @foreach (var contact in contacts.Where(x => x.PreferredWorkType == filter).Skip((currentPage) * perPage).Take(perPage))
            {
                <li>
                    <a href="/contacts/@contact.Id" class="block hover:bg-gray-50">
                        <div class="flex items-center px-4 py-4 sm:px-6">
                            <div class="min-w-0 flex-1 flex items-center">
                                <div class="flex-shrink-0">
                                    <img class="h-12 w-12 rounded-full" src="@contact.ProfileUrl" alt="">
                                </div>
                                <div class="min-w-0 flex-1 px-4 md:grid md:grid-cols-3 md:gap-4 items-center">
                                    <div>
                                        <p class="text-sm font-medium text-indigo-600 truncate">@contact.DisplayName</p>
                                        <p class="mt-2 flex items-center text-sm text-gray-500" title="Email">
                                            <!-- Heroicon name: solid/mail -->
                                        <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                                <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                                                <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                                            </svg>
                                            <span class="truncate">@contact.Email</span>
                                        </p>
                                        <p class="mt-2 flex items-center text-sm text-gray-500" title="Job Type">
                                            <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" width="1em" height="1em" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><path fill="currentColor" d="M20 6h-4V4c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-6 0h-4V4h4v2z" /></svg>
                                            <span class="truncate">@contact.JobType</span>
                                        </p>
                                    </div>
                                    <div class="hidden md:block">
                                        <div>
                                            <p class="mt-2 flex items-center text-sm text-gray-500" title="Expected Salary">
                                                <!-- Heroicon name: solid/dollar -->
                                            <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" role="img" width="1em" height="1em" preserveAspectRatio="xMidYMid meet" viewBox="0 0 36 36"><path fill="currentColor" d="M18 2a16 16 0 1 0 16 16A16 16 0 0 0 18 2Zm7.65 21.59c-1 3-3.61 3.84-5.9 4v2a1.25 1.25 0 0 1-2.5 0v-2A11.47 11.47 0 0 1 11 25a1.25 1.25 0 1 1 1.71-1.83a9.11 9.11 0 0 0 4.55 1.94v-6.28a9.63 9.63 0 0 1-3.73-1.41a4.8 4.8 0 0 1-1.91-5.84c.59-1.51 2.42-3.23 5.64-3.51V6.25a1.25 1.25 0 0 1 2.5 0v1.86a9.67 9.67 0 0 1 4.9 2A1.25 1.25 0 0 1 23 11.95a7.14 7.14 0 0 0-3.24-1.31v6.13c.6.13 1.24.27 1.91.48a5.85 5.85 0 0 1 3.69 2.82a4.64 4.64 0 0 1 .29 3.52Z" class="clr-i-solid clr-i-solid-path-1" /><path fill="currentColor" d="M20.92 19.64c-.4-.12-.79-.22-1.17-.3v5.76c2-.2 3.07-.9 3.53-2.3a2.15 2.15 0 0 0-.15-1.58a3.49 3.49 0 0 0-2.21-1.58Z" class="clr-i-solid clr-i-solid-path-2" /><path fill="currentColor" d="M13.94 12.48a2.31 2.31 0 0 0 1 2.87a6.53 6.53 0 0 0 2.32.92v-5.72c-2.1.25-3.07 1.29-3.32 1.93Z" class="clr-i-solid clr-i-solid-path-3" /><path fill="none" d="M0 0h36v36H0z" /></svg>
                                                <span class="truncate">$@(contact.SalaryExpectation/1000)k</span>
                                            </p>
                                        </div>
                                    </div>
                                    <div class="hidden lg:block">
                                        <div>
                                            <p class="mt-2 flex items-center text-sm text-gray-500" title="Employment Type">
                                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800"> @employmentTypeMapping[contact.PreferredWorkType] </span>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <!-- Heroicon name: solid/chevron-right -->
                            <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                </svg>
                            </div>
                        </div>
                    </a>
                </li>
            }
        </ul>
    </div>

    <!-- This example requires Tailwind CSS v2.0+ -->
    <!-- Pagination -->
    <nav class="border-t border-gray-200 px-4 flex items-center justify-between sm:px-0 @(NumberOfPages() > 1 ? "" : "hidden")" aria-label="Pagination">
        <div class="-mt-px w-0 flex-1 flex">
            <a href="" @onclick="(e) => currentPage = currentPage == 0 ? 0 : currentPage - 1" @onclick:preventDefault class="border-t-2 border-transparent pt-4 pr-1 inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-200">
                <!-- Heroicon name: solid/arrow-narrow-left -->
                <svg class="mr-3 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M7.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                </svg>
                Previous
            </a>
        </div>
        <div class="hidden md:-mt-px md:flex">
            @for (var i = 0; i < NumberOfPages(); i++)
            {
                var tempint = i;
                <a href="" @onclick="(e) => currentPage = tempint" @onclick:preventDefault class="@(tempint == currentPage ? "border-purple-500 text-purple-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-200") border-t-2 pt-4 px-4 inline-flex items-center text-sm font-medium">@(i+1)</a>
            }

            <!-- Current: "border-purple-500 text-purple-600", Default: "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-200" -->

        </div>
        <div class="-mt-px w-0 flex-1 flex justify-end">
            <a href="" @onclick="(e) => currentPage = currentPage == NumberOfPages() - 1 ? currentPage : currentPage + 1" @onclick:preventDefault class="border-t-2 border-transparent pt-4 pl-1 inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-200">
                Next
                <!-- Heroicon name: solid/arrow-narrow-right -->
                <svg class="ml-3 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
            </a>
        </div>
    </nav>
</main>

@code {
    List<Contact> contacts = new();
    ResponseStatus? errorStatus;
    int currentPage = 0;
    int perPage = 5;

    Dictionary<EmploymentType, string> employmentTypeMapping = new() {
        { EmploymentType.FullTime, "Full-time" },
        { EmploymentType.PartTime, "Part-time" },
        { EmploymentType.Contract, "Contract" },
        { EmploymentType.Casual, "Casual" }
    };

    EmploymentType filter = EmploymentType.FullTime;

    int ContactJobAppsCount(Contact contact, JobApplicationStatus status)
    {
        return contact.Applications.Count(x => x.ApplicationStatus == status);
    }

    int ContactCount(EmploymentType employmentType)
    {
        return contacts.Count(x => x.PreferredWorkType == employmentType);
    }

    int NumberOfPages()
    {
        var minPages = (int)Math.Floor((decimal)(contacts.Count(x => x.PreferredWorkType == filter) / perPage));
        var remainderPage = ((contacts.Count(x => x.PreferredWorkType == filter) % perPage > 0) ? 1 : 0);
        return minPages + remainderPage;
    }

    IEnumerable<Contact> FilteredContacts()
    {
        switch (filter)
        {
            case EmploymentType.FullTime:
                return contacts.Where(x => x.PreferredWorkType == EmploymentType.FullTime);
            case EmploymentType.PartTime:
                return contacts.Where(x => x.PreferredWorkType == EmploymentType.PartTime);
            case EmploymentType.Contract:
                return contacts.Where(x => x.PreferredWorkType == EmploymentType.Contract);
            case EmploymentType.Casual:
                return contacts.Where(x => x.PreferredWorkType == EmploymentType.Casual);
        }
        return contacts;
    }

    void ChangeFilter(EmploymentType newFilter)
    {
        filter = newFilter;
        currentPage = 0;
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshContacts();
    }

    async Task RefreshContacts()
    {
        var api = await ApiAsync(new QueryContacts());

        if (api.Succeeded)
            contacts = api.Response!.Results;
        else
            errorStatus = api.Error;
    }
}