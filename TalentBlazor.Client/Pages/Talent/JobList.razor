@page "/jobs"
@inherits AppComponentBase

<SetHeader>
    <div class="flex-1 min-w-0">
        <nav class="flex" aria-label="Breadcrumb">
            @if (jobs.Count > 0)
            {
                <Breadcrumbs>
                    <Breadcrumb href="/jobs">Jobs</Breadcrumb>
                </Breadcrumbs>
            }
        </nav>
        <div class="mt-1 flex flex-col sm:flex-row sm:flex-wrap sm:mt-0 sm:space-x-8">
            <div class="ml-4 mt-4">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Job Postings</h3>
                <p class="mt-1 text-sm text-gray-500">Lorem ipsum dolor sit amet consectetur adipisicing elit quam corrupti consectetur.</p>
            </div>
        </div>
    </div>
    <div class="mt-6 flex xl:mt-0 xl:ml-4">
        <!-- Actions -->
        <AuthorizeView>
            <Authorized>
                <a href="/jobs/create" class="relative inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Create new job</a>
            </Authorized>
        </AuthorizeView>
    </div>
</SetHeader>
<main class="px-4 py-2 sm:p-6">
    <!-- Tabs -->
    <div class="sm:hidden">
        <label for="tabs" class="sr-only">Select a tab</label>
        <!-- Use an "onChange" listener to redirect the user to the selected tab URL. -->
        <select id="tabs" name="tabs" @bind="filter" class="mt-4 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-purple-500 focus:border-purple-500 sm:text-sm rounded-md">
            <option value="@EmploymentType.FullTime">Full-time</option>

            <option value="@EmploymentType.PartTime">Part-time</option>

            <option value="@EmploymentType.Contract">Contract</option>

            <option value="@EmploymentType.Casual">Casual</option>
        </select>
    </div>
    <div class="hidden sm:block">
        <div class="border-b border-gray-200">
            <nav class="mt-2 -mb-px flex space-x-8" aria-label="Tabs">
                <!-- Current: "border-purple-500 text-purple-600", Default: "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-200" -->
                <a href="" @onclick="(e) => ChangeFilter(EmploymentType.FullTime)" @onclick:preventDefault class="@(filter == EmploymentType.FullTime ? "border-purple-500 text-purple-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-200") whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                    Full-time

                    <!-- Current: "bg-purple-100 text-purple-600", Default: "bg-gray-100 text-gray-900" -->
                    <span class="hidden ml-2 py-0.5 px-2.5 rounded-full text-xs font-medium md:inline-block @(filter == EmploymentType.FullTime ? "bg-purple-100 text-purple-600" : "bg-gray-100 text-gray-900")">
                        @(JobCount(EmploymentType.FullTime))
                    </span>
                </a>

                <a href="" @onclick="(e) => ChangeFilter(EmploymentType.PartTime)" @onclick:preventDefault class="@(filter == EmploymentType.PartTime ? "border-purple-500 text-purple-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-200") whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                    Part-time

                    <span class="hidden ml-2 py-0.5 px-2.5 rounded-full text-xs font-medium md:inline-block @(filter == EmploymentType.PartTime ? "bg-purple-100 text-purple-600" : "bg-gray-100 text-gray-900")">
                        @(JobCount(EmploymentType.PartTime))
                    </span>
                </a>

                <a href="" @onclick="(e) => ChangeFilter(EmploymentType.Contract)" @onclick:preventDefault class="@(filter == EmploymentType.Contract ? "border-purple-500 text-purple-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-200") whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                    Contract

                    <span class="hidden ml-2 py-0.5 px-2.5 rounded-full text-xs font-medium md:inline-block @(filter == EmploymentType.Contract ? "bg-purple-100 text-purple-600" : "bg-gray-100 text-gray-900")">
                        @(JobCount(EmploymentType.Contract))
                    </span>
                </a>

                <a href="" @onclick="(e) => ChangeFilter(EmploymentType.Casual)" @onclick:preventDefault class="@(filter == EmploymentType.Casual ? "border-purple-500 text-purple-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-200") whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">
                    Casual
                    <!-- Current: "bg-purple-100 text-purple-600", Default: "bg-gray-100 text-gray-900" -->
                    <span class="hidden ml-2 py-0.5 px-2.5 rounded-full text-xs font-medium md:inline-block @(filter == EmploymentType.Casual ? "bg-purple-100 text-purple-600" : "bg-gray-100 text-gray-900")">
                        @(JobCount(EmploymentType.Casual))
                    </span>
                </a>
            </nav>
        </div>
    </div>
    <!-- This example requires Tailwind CSS v2.0+ -->
    <div class="bg-white shadow overflow-hidden sm:rounded-md">
        <ul role="list" class="divide-y divide-gray-200">
            @foreach (var job in jobs.Where(x => x.EmploymentType == filter).Skip((currentPage) * perPage).Take(perPage))
            {
                <li>
                    <a href="/jobs/@(job.Id)/applications" class="block hover:bg-gray-50">
                        <div class="px-4 py-4 sm:px-6">
                            <div class="flex items-center justify-between">
                                <p class="text-sm font-medium text-indigo-600 truncate">@job.Title</p>
                                <div class="ml-2 flex-shrink-0 flex">
                                    <p class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">@(employmentTypeMapping[job.EmploymentType])</p>
                                </div>
                            </div>
                            <div class="mt-2 sm:flex sm:justify-between">
                                <div class="sm:flex">
                                    <p class="flex items-center text-sm text-gray-500">
                                        <!-- Heroicon name: solid/users -->
                                    <svg class="text-gray-400 group-hover:text-gray-500 -ml-0.5 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                            <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h8a2 2 0 012 2v12a1 1 0 110 2h-3a1 1 0 01-1-1v-2a1 1 0 00-1-1H9a1 1 0 00-1 1v2a1 1 0 01-1 1H4a1 1 0 110-2V4zm3 1h2v2H7V5zm2 4H7v2h2V9zm2-4h2v2h-2V5zm2 4h-2v2h2V9z" clip-rule="evenodd" />
                                        </svg>
                                        @job.Company
                                    </p>
                                    <p class="flex items-center text-sm text-gray-500 sm:mt-0 sm:ml-6">
                                        <!-- Heroicon name: solid/location-marker -->
                                    <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                            <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" />
                                        </svg>
                                        @job.Location
                                    </p>
                                </div>
                                <div class="flex items-center text-sm text-gray-500 sm:mt-0">
                                    <!-- Heroicon name: solid/calendar -->
                                <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
                                    </svg>
                                    <p>
                                        Closing on
                                        <time datetime="@job.Closing.ToString("yyyy-MM-dd")">@job.Closing.ToString("d MMMM, yyyy")</time>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </a>
                </li>
            }

        </ul>
    </div>
    <!-- Pagination -->
    <nav class="border-t border-gray-200 px-4 flex items-center justify-between sm:px-0 @(NumberOfPages() > 1 ? "" : "hidden")" aria-label="Pagination">
        <div class="-mt-px w-0 flex-1 flex">
            <a href="" @onclick="(e) => currentPage = currentPage == 0 ? 0 : currentPage - 1" @onclick:preventDefault class="border-t-2 border-transparent pt-4 pr-1 inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-200">
                <!-- Heroicon name: solid/arrow-narrow-left -->
                <svg class="mr-3 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M7.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                </svg>
                Previous
            </a>
        </div>
        <div class="hidden md:-mt-px md:flex">
            @for (var i = 0; i < NumberOfPages(); i++)
            {
                var tempint = i;
                <a href="" @onclick="(e) => currentPage = tempint" @onclick:preventDefault class="@(tempint == currentPage ? "border-purple-500 text-purple-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-200") border-t-2 pt-4 px-4 inline-flex items-center text-sm font-medium">@(i+1)</a>
            }
            <!-- Current: "border-purple-500 text-purple-600", Default: "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-200" -->
        </div>
        <div class="-mt-px w-0 flex-1 flex justify-end">
            <a href="" @onclick="(e) => currentPage = currentPage == NumberOfPages() - 1 ? currentPage : currentPage + 1" @onclick:preventDefault class="border-t-2 border-transparent pt-4 pl-1 inline-flex items-center text-sm font-medium text-gray-500 hover:text-gray-700 hover:border-gray-200">
                Next
                <!-- Heroicon name: solid/arrow-narrow-right -->
                <svg class="ml-3 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
            </a>
        </div>
    </nav>
</main>

@code {
    List<Job> jobs = new();
    ResponseStatus? errorStatus;
    int currentPage = 0;
    int perPage = 5;

    Dictionary<EmploymentType, string> employmentTypeMapping = new() {
        { EmploymentType.FullTime, "Full-time" },
        { EmploymentType.PartTime, "Part-time" },
        { EmploymentType.Contract, "Contract" },
        { EmploymentType.Casual, "Casual" }
    };

    EmploymentType filter = EmploymentType.FullTime;

    int JobCount(EmploymentType employmentType) => jobs.Count(x => x.EmploymentType == employmentType);

    void ChangeFilter(EmploymentType newFilter)
    {
        filter = newFilter;
        currentPage = 0;
    }

    IEnumerable<Job> FilteredJobs() => filter switch {
        EmploymentType.FullTime => jobs.Where(x => x.EmploymentType == EmploymentType.FullTime),
        EmploymentType.PartTime => jobs.Where(x => x.EmploymentType == EmploymentType.PartTime),
        EmploymentType.Contract => jobs.Where(x => x.EmploymentType == EmploymentType.Contract),
        EmploymentType.Casual => jobs.Where(x => x.EmploymentType == EmploymentType.Casual),
        _ => jobs
    };

    int NumberOfPages()
    {
        var minPages = (int)Math.Floor((decimal)(jobs.Count(x => x.EmploymentType == filter) / perPage));
        var remainderPage = jobs.Count(x => x.EmploymentType == filter) % perPage > 0 ? 1 : 0;
        return minPages + remainderPage;
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshJobs();
    }

    async Task RefreshJobs()
    {
        var api = await ApiAsync(new QueryJob());
        if (api.Succeeded)
            jobs = api.Response!.Results;
        else
            errorStatus = api.Error;
    }
}
