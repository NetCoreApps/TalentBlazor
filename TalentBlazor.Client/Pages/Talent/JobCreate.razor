@inherits AppAuthComponentBase
@inject ServiceStackStateProvider AuthStateProvider;
@inject NavigationManager navigationManager;
@page "/jobs/{JobId:int}/edit"

<div class="overflow-hidden rounded-lg">
    <header class="px-4 py-2 sm:px-6">
    </header>
    <main class="py-8">
        @if (appMetadata != null)
        {
            <CascadingValue Value="appMetadata">
                <AutoQueryForm TResponse="Job" T="UpdateJob" Request="request" OnSave="save" OnDone="done"></AutoQueryForm>
            </CascadingValue>
        }
    </main>
</div>

@code {
    [Parameter]
    public int JobId { get; set; }

    ResponseStatus? errorStatus;

    ApiResult<AppMetadata> appMetadataApi = new();
    AppMetadata appMetadata;
    UpdateJob request = new();
    Job job;

    async Task save(UpdateJob req)
    {
        //request = req;
    }

    async Task done(Job response)
    {
        navigationManager.NavigateTo("/jobs/" + JobId + "/applications");
    }

    async Task OnCancel()
    {
        navigationManager.NavigateTo("/jobs/" + JobId + "/applications");
    }


    protected override async Task OnInitializedAsync()
    {
        appMetadataApi = await this.ApiAppMetadataAsync();
        if (appMetadataApi.Succeeded)
        {
            appMetadata = appMetadataApi.Response!;
        }
        else
        {
            errorStatus = appMetadataApi.Error;
            return;
        }
        var api = await ApiAsync(new QueryJob { Id = JobId });
        if(api.Succeeded)
        {
            job = api.Response!.Results[0];
            request = job.ConvertTo<UpdateJob>();
        }
        else
        {
            errorStatus = appMetadataApi.Error;
        }
    }
}
