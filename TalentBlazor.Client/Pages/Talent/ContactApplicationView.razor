@page "/jobs/{JobId:int}/applications/{JobAppId:int}"
@inherits AppComponentBase

<div class="bg-gray-50 overflow-hidden rounded-lg">
    <header class="px-4 py-2 sm:px-6 bg-gray-50">
    </header>
    <main class="py-10">
        <!-- Page header -->
        <div class="max-w-3xl mx-auto px-4 sm:px-6 md:flex md:items-center md:justify-between md:space-x-5 lg:max-w-7xl lg:px-8">
            <div class="flex items-center space-x-5">
                <div class="flex-shrink-0">
                    <div class="relative">
                        <img class="h-16 w-16 rounded-full" src="@(jobApp.Applicant?.ProfileUrl)" alt="">
                        <span class="absolute inset-0 shadow-inner rounded-full" aria-hidden="true"></span>
                    </div>
                </div>
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">@(jobApp.Applicant?.DisplayName)</h1>
                    <p class="text-sm font-medium text-gray-500">Applied for <a href="#" class="text-gray-900">@(jobApp.Position?.Title)</a> on <time datetime="@(jobApp.AppliedDate.ToString("yyyy-MM-dd"))">@(jobApp.AppliedDate.ToString("MMMM d, yyyy"))</time></p>
                </div>
            </div>
            <div class="mt-6 flex flex-col-reverse justify-stretch space-y-4 space-y-reverse sm:flex-row-reverse sm:justify-end sm:space-x-reverse sm:space-y-0 sm:space-x-3 md:mt-0 md:flex-row md:space-x-3">
                <AuthorizeView>
                    <Authorized>
                        <button type="button" class="inline-flex items-center justify-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-blue-500">Disqualify</button>
                        @switch (jobApp.ApplicationStatus)
                        {
                            case JobApplicationStatus.Applied:
                                <button type="button" @onclick="() => showAdvancePhoneScreen = true" class="inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-blue-500">Advance to @jobAppStatusMapping[jobApp.ApplicationStatus + 1]</button>
                                break;
                            case JobApplicationStatus.PhoneScreening:
                                <button type="button" @onclick="() => showCompletePhoneScreen = true" class="inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-blue-500">Advance to @jobAppStatusMapping[jobApp.ApplicationStatus + 1]</button>
                                break;
                            case JobApplicationStatus.PhoneScreeningCompleted:
                                <button type="button" @onclick="() => showBookInterview = true" class="inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-blue-500">Advance to @jobAppStatusMapping[jobApp.ApplicationStatus + 1]</button>
                                break;
                            case JobApplicationStatus.Interview:
                                <button type="button" @onclick="() => showCompleteInterview = true" class="inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-blue-500">Advance to @jobAppStatusMapping[jobApp.ApplicationStatus + 1]</button>
                                break;
                            case JobApplicationStatus.InterviewCompleted:
                                <button type="button" class="inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-blue-500">Advance to @jobAppStatusMapping[jobApp.ApplicationStatus + 1]</button>
                                break;
                            case JobApplicationStatus.Offer:
                                <button type="button" class="inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-red-500">Recind Offer</button>
                                break;
                            case JobApplicationStatus.Disqualified:
                                break;
                            default:
                                break;
                        }
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>

        <div class="mt-8 max-w-3xl mx-auto grid grid-cols-1 gap-6 sm:px-6 lg:max-w-7xl lg:grid-flow-col-dense lg:grid-cols-3">
            <div class="space-y-6 lg:col-start-1 lg:col-span-2">
                <!-- Description list-->
                <section aria-labelledby="applicant-information-title">
                    <div class="bg-white shadow sm:rounded-lg">
                        <div class="px-4 py-5 sm:px-6">
                            <h2 id="applicant-information-title" class="text-lg leading-6 font-medium text-gray-900">Applicant Information</h2>
                            <p class="mt-1 max-w-2xl text-sm text-gray-500">Personal details and application.</p>
                        </div>
                        <div class="border-t border-gray-200 px-4 py-5 sm:px-6">
                            <JobAppSummaryInfo JobApplication="jobApp" />
                        </div>
                    </div>
                </section>

                <!-- Comments-->
                <JobAppComments JobApplicationId="JobAppId" PhoneScreen="phoneScreen" Interview="interview" />
            </div>

            <section aria-labelledby="timeline-title" class="lg:col-start-3 lg:col-span-1">
                <JobAppTimeline JobApplicationId="JobAppId" JobApplication="jobApp" OnAdvanceClick="advanceApplication"
                                OnDisqualifyClick="disqualifyJobApplication"></JobAppTimeline>
            </section>
        </div>
    </main>

    <!-- Advance to phonescreen -->
    <CascadingValue Value=@phoneScreenResult.Error>
        <JobAppModal ModalTitle="Advance to phone screen" ModalDescription="The candidate will need an employee to perform a phone screening before proceeding."
                     OnSave="createPhoneScreenBooking" OnClose="() => showAdvancePhoneScreen = false" class="@(showAdvancePhoneScreen == false ? "hidden" : "")">
            <form class="space-y-6" @onsubmit:preventDefault>
                <div>
                    <div class="mt-1">
                        <EmployeeLookup Users="appUsers" OnEmployeeSelection="OnEmployeeSelectionChanged" ControlTitle="Phone Screener"></EmployeeLookup>
                    </div>
                </div>
                <ErrorSummary Status="@phoneScreenResult.Error" />
            </form>
        </JobAppModal>
    </CascadingValue>

    <!--Complete Phone Screen-->
    <CascadingValue Value=@phoneScreenResult.Error>
        <JobAppModal ModalTitle="Progress To Phone Screen" ModalDescription="The candidate will need an employee to perform a phone screening before proceeding."
                     OnSave="updatePhoneScreenCompleted" OnClose="() => showCompletePhoneScreen = false" class="@(showCompletePhoneScreen == false ? "hidden" : "")">
            <form class="space-y-6" @onsubmit:preventDefault>
                <div>
                    <div class="mt-1">
                        <TextAreaInput @bind-Value="phoneScreenNotes" name="phoneScreenNotes" rows="3" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border border-gray-300 rounded-md" placeholder="The candidate demonstrated..."></TextAreaInput>
                    </div>
                </div>
                <ErrorSummary Status="@phoneScreenResult.Error" />
            </form>
        </JobAppModal>
    </CascadingValue>

    <!-- Book interview -->
    <CascadingValue Value=@interviewResult.Error>
        <JobAppModal ModalTitle="Interview Booking" ModalDescription="Book interview with appropriate team member to evaluate the candidate."
                     OnSave="createInterviewBooking" OnClose="() => showBookInterview = false" class="@(showBookInterview == false ? "hidden" : "")">
            <form class="space-y-6" @onsubmit:preventDefault>
                <div>
                    <div class="mt-1">
                        <DateTimeLocalInput @bind-Value="interviewBookingTime" min="09:00" max="18:00" required class="block w-full sm:text-sm rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 border-gray-300"></DateTimeLocalInput>
                    </div>
                    <div class="mt-1">
                        <EmployeeLookup Users="appUsers" OnEmployeeSelection="OnEmployeeSelectionChanged" ControlTitle="Interviewer"></EmployeeLookup>
                    </div>
                </div>
                <ErrorSummary Status="@interviewResult.Error" />
            </form>
        </JobAppModal>
    </CascadingValue>

    <!-- Complete interview -->

    <JobAppModal ModalTitle="Interview Result" ModalDescription="Provide context of other team members for how the interview with the candidate went."
                 OnSave="submitInterviewCompleted" OnClose="() => showCompleteInterview = false" class="@(showCompleteInterview == false ? "hidden" : "")">
        <CascadingValue Value=@interviewResult.Error>
            <form class="space-y-6" @onsubmit:preventDefault>
                <div>
                    <div class="mt-1">
                        <TextAreaInput @bind-Value="interviewNotes" name="interviewNotes" rows="3" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border border-gray-300 rounded-md" placeholder="The candidate demonstrated..."></TextAreaInput>
                    </div>
                </div>
                <ErrorSummary Status="@interviewResult.Error" />
            </form>
        </CascadingValue>
    </JobAppModal>


</div>

@code {
    [Parameter]
    public int JobId { get; set; }

    [Parameter]
    public int JobAppId { get; set; }

    JobApplication jobApp = new();
    List<JobApplicationEvent> jobAppEvents = new();
    List<AppUser> appUsers = new();

    PhoneScreen phoneScreen = new();
    Interview interview = new();

    AppUser? employeeSelection;

    string? selectedResult;

    string? searchTerm;

    ResponseStatus? errorStatus;

    DateTime interviewBookingTime = DateTime.UtcNow.Date;
    string interviewNotes = "";
    string phoneScreenNotes = "";

    ApiResult<Interview> interviewResult = new();
    ApiResult<PhoneScreen> phoneScreenResult = new();

    bool showBookInterview = false;
    bool showCompleteInterview = false;

    bool showAdvancePhoneScreen = false;
    bool showCompletePhoneScreen = false;

    void resetInterview()
    {
        interviewBookingTime = DateTime.UtcNow.Date;
        interviewNotes = "";
        employeeSelection = null;
        interviewResult = new();
    }

    void resetPhoneScreen()
    {
        phoneScreenNotes = "";
        employeeSelection = null;
        phoneScreenResult = new();
    }

    protected override async Task OnInitializedAsync()
    {
        await refreshData();
    }

    async Task advanceApplication(JobApplicationStatus status)
    {
        switch (status)
        {
            case JobApplicationStatus.Applied:
                showAdvancePhoneScreen = true;
                break;
            case JobApplicationStatus.PhoneScreening:
                showCompletePhoneScreen = true;
                break;
            case JobApplicationStatus.PhoneScreeningCompleted:
                showBookInterview = true;
                break;
            case JobApplicationStatus.Interview:
                showCompleteInterview = true;
                break;
            default:
                break;
        }
    }

    async Task disqualifyJobApplication(JobApplicationStatus status)
    {
        var api = await ApiAsync(new UpdateJobApplication
            {
                Id = jobApp.Id,
                AppliedDate = jobApp.AppliedDate,
                ContactId = jobApp.ContactId,
                JobId = jobApp.JobId,
                ApplicationStatus = JobApplicationStatus.Disqualified
            });
        if (api.Succeeded)
            jobApp = api.Response!;
        else
            errorStatus = api.Error;
    }

    async Task refreshData()
    {
        await refreshJobApp();
        await refreshJobAppEvents();
        if (appUsers.Count == 0)
            await getAppUsers();
        await refreshPhoneScreen();
        await refreshInterview();
    }

    async Task refreshPhoneScreen()
    {
        var api = await ApiAsync(new QueryPhoneScreen
            {
                JobApplicationId = JobAppId
            });
        if (api.Succeeded)
        {
            var hasPhoneScreen = api.Response!.Results.Count > 0;
            phoneScreen = hasPhoneScreen ? api.Response!.Results[0] : new();
        }
        else
            errorStatus = api.Error;
    }

    async Task refreshInterview()
    {
        var api = await ApiAsync(new QueryInterview
            {
                JobApplicationId = JobAppId
            });
        if (api.Succeeded)
        {
            var hasInterview = api.Response!.Results.Count > 0;
            interview = hasInterview ? api.Response!.Results[0] : new();
        }
        else
            errorStatus = api.Error;
    }

    async Task refreshJobApp()
    {
        var api = await ApiAsync(new QueryJobApplication
            {
                Id = JobAppId
            });
        if (api.Succeeded)
            jobApp = api.Response!.Results[0];
        else
            errorStatus = api.Error;
    }

    async Task getAppUsers()
    {
        var api = await ApiAsync(new QueryAppUser());
        if (api.Succeeded)
            appUsers = api.Response!.Results;
        else
            errorStatus = api.Error;
    }

    void OnEmployeeSelectionChanged(AppUser val)
    {
        Console.WriteLine($"Api user selection changed: {val.Email}");
        employeeSelection = val;
    }

    async Task refreshJobAppEvents()
    {
        var api = await ApiAsync(new QueryJobAppEvents
            {
                JobApplicationId = JobAppId
            });
        if (api.Succeeded)
            jobAppEvents = api.Response!.Results;
        else
            errorStatus = api.Error;
    }

    async Task<bool> createPhoneScreenBooking()
    {
        var createPhone = new CreatePhoneScreen();
        createPhone.JobApplicationId = JobAppId;
        createPhone.AppUserId = employeeSelection?.Id ?? 0;
        phoneScreenResult = await ApiAsync(createPhone);
        if (phoneScreenResult.Succeeded)
        {
            resetPhoneScreen();
            await refreshData();
            showAdvancePhoneScreen = false;
            return true;
        }
        else
            errorStatus = phoneScreenResult.Error;

        return false;
    }

    async Task<bool> updatePhoneScreenCompleted()
    {
        var updatePhone = new UpdatePhoneScreen();
        updatePhone.JobApplicationId = jobApp.Id;
        updatePhone.Notes = phoneScreenNotes;
        updatePhone.Id = jobApp.PhoneScreen.Id;
        phoneScreenResult = await ApiAsync(updatePhone);
        if (phoneScreenResult.Succeeded)
        {
            resetPhoneScreen();
            await refreshData();
            showCompletePhoneScreen = false;
            return true;
        }
        else
            errorStatus = phoneScreenResult.Error;

        return false;
    }

    async Task<bool> createInterviewBooking()
    {
        var createInterview = new CreateInterview();
        createInterview.JobApplicationId = JobAppId;
        createInterview.AppUserId = employeeSelection?.Id ?? 0;
        createInterview.BookingTime = interviewBookingTime;
        interviewResult = await ApiAsync(createInterview);
        if (interviewResult.Succeeded)
        {
            resetInterview();
            await refreshData();
            showBookInterview = false;
            return true;
        }
        else
            errorStatus = interviewResult.Error;
        return false;
    }

    async Task<bool> submitInterviewCompleted()
    {
        var updateInterview = new UpdateInterview();
        updateInterview.Id = jobApp.Interview.Id;
        updateInterview.JobApplicationId = jobApp.Id;
        updateInterview.Notes = interviewNotes;
        interviewResult = await ApiAsync(updateInterview);
        if (interviewResult.Succeeded)
        {
            resetInterview();
            await refreshData();
            showCompleteInterview = false;
            return true;
        }
        else
            errorStatus = interviewResult.Error;

        return false;
    }

    Dictionary<JobApplicationStatus, string> jobAppStatusMapping = new()
        {
            { JobApplicationStatus.Applied, "Applied" },
            { JobApplicationStatus.Interview, "Interview" },
            { JobApplicationStatus.InterviewCompleted, "Interview Completed" },
            { JobApplicationStatus.PhoneScreening, "Phone Screening" },
            { JobApplicationStatus.PhoneScreeningCompleted, "Phone Screening Completed" },
            { JobApplicationStatus.Offer, "Offer" },
            { JobApplicationStatus.Disqualified, "Disqualified" }
        };
}