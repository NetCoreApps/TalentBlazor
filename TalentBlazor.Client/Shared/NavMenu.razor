@inject ServiceStackStateProvider AuthStateProvider;
@inject NavigationManager NavigationManager;

<div class="nav-menu top-row navbar navbar-dark">
    <a class="navbar-brand ps-4" href="">TalentBlazor</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@CssUtils.ClassNames("nav-menu", collapseNavMenu ? "collapse" : "")" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/contacts">
                <span class="oi oi-person" aria-hidden="true"></span> Contacts
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="/jobs">
                <span class="oi oi-briefcase" aria-hidden="true"></span> Jobs
            </NavLink>
        </li>
        <AuthorizeView>
            <Authorized>
            <li class="nav-item px-3">
                <a href="javascript:void" class="nav-link" @onclick="logout"><span class="oi oi-account-logout" aria-hidden="true"></span>Logout</a>
            </li>
            </Authorized>
            <NotAuthorized>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="@LoginUrl">
                    <span class="oi oi-account-login" aria-hidden="true"></span> Login
                </NavLink>
            </li>
            </NotAuthorized>
        </AuthorizeView>
    </ul>
</div>

@code {
    bool collapseNavMenu = true;

    void ToggleNavMenu() => collapseNavMenu = !collapseNavMenu;

    string? LoginUrl { get; set; }

    protected override Task OnParametersSetAsync()
    {
        LoginUrl = NavigationManager.GetLoginUrl();
        return Task.CompletedTask;
    }

    async Task logout()
    {
        await AuthStateProvider.LogoutAsync();
        NavigationManager.NavigateTo(LoginUrl ?? "/", true);
    }
}
